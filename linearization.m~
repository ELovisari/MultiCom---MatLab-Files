clc
clear all
close all


% Import the selected topology
topologyMultiTest

% Number of time steps
Tmax = 2000;

% Length of each timestep
T = 0.01;

% Set the capacity on the edges
aafFmax = 5*ones(M, Tmax);
%aafFmax(4, :) = ones(1, Tmax);

% Total inflow
afLambda0 =   0.5*ones(nof, Tmax); 
%afLambda0(1,:) =1;
% Stop one flow after some time
% afLambda0(1, 1000:2000) = 0;

% No thresholds
afThreholdRho = Inf*rand(M,1); 

% Routing policy (Should really block some...)
fBetaRouting            = ceil(10*rand(M,nof));     
% 
% fBetaRouting = [     1     2
%      9     7
%     10     5
%      8     8
%      1     8
%      3    10
%      4     9
%      7     4
%      2     7]
     %8     2]
% fBetaRouting = [ 
%      7     9
%      7     8
%      4     6
%      2     2
%      1    10
%      5     3
%      2    10
%      8     3
%      4     4];
 

% Flow 1
% fBetaRouting(2,1) = 1;
% fBetaRouting(5,1) = 9;
% 
% fBetaRouting(2,2) = 3;
% fBetaRouting(5,2) = 7;

fBetaRouting            = ones(M,nof);     


% Mu (CHANGE)
etaMu                   = 1*ones(M,1);
%etaMu(6) = 1;

% Initial condition, just set all to zero and to generic
afInitialConditionRho = zeros(nof, M);
afInitialConditionRho1 = 2*rand(nof, M);
afInitialConditionRho1(2,10) = 0;
afInitialConditionRho1(2,7) = 0;
afInitialConditionRho1(1,3) = 0;
afInitialConditionRho1(1,9) = 0;

% Don't use any traffic lights
bFlagUseTrafficLights   = 0;  

%
[aafRho, aafFlow, aaafG, aafChange, afDischarge]         = SimulateMulticommodityNetwork(                   ...
                                                            A, aafFmax, afLambda0, afThreholdRho, T, Tmax,         ...
                                                            afInitialConditionRho, fAlphaRouting,                 ...
                                                            fBetaRouting, etaMu, nof, originNodes, destNodes, bFlagUseTrafficLights);
% aafRho1 = aafRho; aafFlow1 = aafFlow; aaafG1 = aaafG; aafChange1 = aafChange; afDischarge1 = afDischarge;
% 
% [aafRho1, aafFlow1, aaafG1, aafChange1, afDischarge1]         = SimulateMulticommodityNetwork(                   ...
%                                                             A, aafFmax, afLambda0, afThreholdRho, T, Tmax,         ...
%                                                             afInitialConditionRho1, fAlphaRouting,                 ...
%                                                             fBetaRouting, etaMu, nof, originNodes, destNodes, bFlagUseTrafficLights);
%%
close all
figure
for iEdge = 1:M
    subplot(floor(M/2)+1, 2, iEdge)
    hold on
    plot(squeeze(aafRho(1, iEdge, :)),'b')
    plot(squeeze(aafRho(2, iEdge, :)),'g')
%     plot(squeeze(aafRho1(1, iEdge, :)),':b')
%     plot(squeeze(aafRho1(2, iEdge, :)),':g')
    title(['Rho ', num2str(iEdge)])
end
figure
for iEdge = 1:M
    subplot(floor(M/2)+1, 2, iEdge)
    hold on
    plot(squeeze(aafFlow(1, iEdge, :)),'b')
    plot(squeeze(aafFlow(2, iEdge, :)),'g')
    % plot(squeeze(aafFlow(1, iEdge, :)) + squeeze(aafFlow(2, iEdge, :)),'y')
 %   plot(squeeze(aafFlow(1, iEdge, :)) + squeeze(aafFlow(2, iEdge, :)),'r')
%     plot(squeeze(aafFlow1(1, iEdge, :)),':b')
%     plot(squeeze(aafFlow1(2, iEdge, :)),':g')
    title(['Flow ', num2str(iEdge)])
end
%%
figure
for iEdge = 1:M
    subplot(floor(M/2)+1, 2, iEdge)
    hold on
    plot((squeeze(aafFlow(1, iEdge, :)) + squeeze(aafFlow(2, iEdge, :)))./(squeeze(aafRho(1, iEdge, :)) + squeeze(aafRho(2, iEdge, :))),'b')
     % plot(squeeze(aafFlow(1, iEdge, :)) + squeeze(aafFlow(2, iEdge, :)),'y')
 %   plot(squeeze(aafFlow(1, iEdge, :)) + squeeze(aafFlow(2, iEdge, :)),'r')
%     plot(squeeze(aafFlow1(1, iEdge, :)),':b')
%     plot(squeeze(aafFlow1(2, iEdge, :)),':g')
    title(['Vel ', num2str(iEdge)])
end
%%
vel = @(x) (1-exp(-x))/(x);
veldiff = @(x) (exp(-x)*x-(1-exp(-x)))/(x^2);

jacobian = zeros(6,6);
jacobian(1,1) = -vel(aafRho(1,1,end))-aafRho(1,1,end)*veldiff(aafRho(1,1,end));
jacobian(2,2) = -vel(aafRho(2,2,end))-aafRho(2,2,end)*veldiff(aafRho(2,2,end));
jacobian(3,1) = vel(aafRho(1,1,end)) + aafRho(1,1,end)*veldiff(aafRho(1,1,end));
jacobian(3,3) = -vel(sum(aafRho(:,3,end)))-aafRho(1,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(3,4) = -aafRho(1,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(4,2) = vel(aafRho(2,2,end)) + aafRho(2,2,end)*veldiff(aafRho(2,2,end));
jacobian(4,3) = -aafRho(2,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(4,4) = -vel(sum(aafRho(:,3,end)))-aafRho(2,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(5,3) = vel(sum(aafRho(:,3,end)))+aafRho(1,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(5,4) = -aafRho(1,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(5,5) = -vel(aafRho(1,4,end))-aafRho(1,4,end)*veldiff(aafRho(1,4,end));
jacobian(6,3) =  -aafRho(2,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(6,4) = vel(sum(aafRho(:,3,end)))+aafRho(2,3,end)*veldiff(sum(aafRho(:,3,end)));
jacobian(6,6) = -vel(aafRho(2,5,end))-aafRho(2,5,end)*veldiff(aafRho(2,5,end));

eig(jacobian)